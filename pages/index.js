import Head from "next/head";
import styles from "../styles/Home.module.css";
import { loadPosts } from "../lib/load-posts";
import Card from "/components/Card";
import { useRouter } from "next/router";

export default function Home({ data, err }) {
  const router = useRouter();
  if (err) {
    // Redirect to 404 page
    if (typeof window !== "undefined") {
      router.push("/404");
    }
    // Return a loading state or fallback UI while redirecting
    return (
      <div className={styles.container}>
        <Head>
          <title>Study Ghouls</title>
          <meta name="description" content="Generated by create next app" />
          <link
            href="https://fonts.googleapis.com/css2?family=Nunito:wght@400&display=swap"
            rel="stylesheet"
          ></link>
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <main className={styles.main}>
          <h1 className={styles.title}>Loading...</h1>
        </main>
      </div>
    );
  }
  return (
    <div className={styles.container}>
      <Head>
        <title>Study Ghouls</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <h1 className={styles.title}>Welcome to Study Ghouls</h1>

        <p className={styles.tagline}>
          <code> Discover.Learn.Excel </code>
        </p>
        <div className={styles.cardContainer}>
          {data && data.length > 0 ? (
            data.map((post) => (
              <Card
                key={post.id}
                imageSrc={post.attributes.HeroPic.data.attributes.url}
                title={post.attributes.Title}
                description={post.attributes.Description}
                Slug={post.attributes.Slug}
              />
            ))
          ) : (
            <p>Our Writer is writing...</p>
          )}
        </div>
      </main>
    </div>
  );
}

export async function getStaticProps() {
  try {
    const allBlogData = await loadPosts();
    return {
      props: {
        data: allBlogData,
        error: false,
      },
    };
  } catch (error) {
    console.error("Error loading blog data:", error);
    return {
      props: {
        data: [],
        err: true,
      },
    };
  }
}
